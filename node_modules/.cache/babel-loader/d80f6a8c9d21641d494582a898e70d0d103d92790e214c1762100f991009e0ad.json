{"ast":null,"code":"import { createElementVNode as _createElementVNode, toDisplayString as _toDisplayString, createCommentVNode as _createCommentVNode, vModelText as _vModelText, withDirectives as _withDirectives, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = /*#__PURE__*/_createElementVNode(\"h1\", null, \"Sterilizer SCADA\", -1 /* HOISTED */);\nconst _hoisted_2 = {\n  class: \"image-container\"\n};\nconst _hoisted_3 = /*#__PURE__*/_createElementVNode(\"img\", {\n  src: \"/SCADA.jpg\",\n  alt: \"My Image\"\n}, null, -1 /* HOISTED */);\nconst _hoisted_4 = {\n  class: \"data-display\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", null, [_hoisted_1, _createElementVNode(\"p\", null, \"Status: \" + _toDisplayString($setup.connectionStatus), 1 /* TEXT */), _createElementVNode(\"div\", _hoisted_2, [_hoisted_3, _createElementVNode(\"div\", _hoisted_4, [_createElementVNode(\"p\", null, \"ID: \" + _toDisplayString($setup.id), 1 /* TEXT */), _createElementVNode(\"p\", null, \"Device: \" + _toDisplayString($setup.device), 1 /* TEXT */), _createElementVNode(\"p\", null, \"Temp: \" + _toDisplayString($setup.temp), 1 /* TEXT */), _createElementVNode(\"p\", null, \"Pressure: \" + _toDisplayString($setup.pressure), 1 /* TEXT */), _createElementVNode(\"p\", null, \"Amp: \" + _toDisplayString($setup.amp), 1 /* TEXT */), _createElementVNode(\"p\", null, \"Status: \" + _toDisplayString($setup.status), 1 /* TEXT */), _createElementVNode(\"p\", null, \"Valve 1: \" + _toDisplayString($setup.valve1), 1 /* TEXT */), _createElementVNode(\"p\", null, \"Valve 1 Status: \" + _toDisplayString($setup.valve1_status), 1 /* TEXT */), _createElementVNode(\"p\", null, \"Valve 2: \" + _toDisplayString($setup.valve2), 1 /* TEXT */), _createElementVNode(\"p\", null, \"Valve 2 Status: \" + _toDisplayString($setup.valve2_status), 1 /* TEXT */), _createElementVNode(\"p\", null, \"Valve 3: \" + _toDisplayString($setup.valve3), 1 /* TEXT */), _createElementVNode(\"p\", null, \"Valve 3 Status: \" + _toDisplayString($setup.valve3_status), 1 /* TEXT */), _createElementVNode(\"p\", null, \"Timer 1: \" + _toDisplayString($setup.timer1), 1 /* TEXT */), _createElementVNode(\"p\", null, \"Timer 2: \" + _toDisplayString($setup.timer2), 1 /* TEXT */), _createCommentVNode(\" Add more properties here \")])]), _withDirectives(_createElementVNode(\"input\", {\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => $setup.message = $event),\n    type: \"text\",\n    placeholder: \"Type a message\"\n  }, null, 512 /* NEED_PATCH */), [[_vModelText, $setup.message]]), _createElementVNode(\"button\", {\n    onClick: _cache[1] || (_cache[1] = (...args) => $setup.sendMessage && $setup.sendMessage(...args))\n  }, \"Send Message\"), _createElementVNode(\"ul\", null, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($setup.receivedMessages, message => {\n    return _openBlock(), _createElementBlock(\"li\", {\n      key: message\n    }, _toDisplayString(message), 1 /* TEXT */);\n  }), 128 /* KEYED_FRAGMENT */))])]);\n}","map":{"version":3,"names":["_createElementVNode","class","src","alt","_createElementBlock","_hoisted_1","_toDisplayString","$setup","connectionStatus","_hoisted_2","_hoisted_3","_hoisted_4","id","device","temp","pressure","amp","status","valve1","valve1_status","valve2","valve2_status","valve3","valve3_status","timer1","timer2","_createCommentVNode","message","$event","type","placeholder","onClick","_cache","args","sendMessage","_Fragment","_renderList","receivedMessages","key"],"sources":["D:\\Project\\PROOFOFCONCEPT3\\VueJS_Flask_Socket-main\\VueJS_Flask_Socket-main\\src\\components\\HelloWorld.vue"],"sourcesContent":["<template>\n  <div>\n    <h1>Sterilizer SCADA</h1>\n    <p>Status: {{ connectionStatus }}</p>\n\n    <div class=\"image-container\">\n \n    <img src=\"/SCADA.jpg\" alt=\"My Image\" />\n    <div class=\"data-display\">\n      <p>ID: {{ id }}</p>\n      <p>Device: {{ device }}</p>\n      <p>Temp: {{ temp }}</p>\n      <p>Pressure: {{ pressure }}</p>\n      <p>Amp: {{ amp }}</p>\n      <p>Status: {{ status }}</p>\n      <p>Valve 1: {{ valve1 }}</p>\n      <p>Valve 1 Status: {{ valve1_status }}</p>\n      <p>Valve 2: {{ valve2 }}</p>\n      <p>Valve 2 Status: {{ valve2_status }}</p>\n      <p>Valve 3: {{ valve3 }}</p>\n      <p>Valve 3 Status: {{ valve3_status }}</p>\n      <p>Timer 1: {{ timer1 }}</p>\n      <p>Timer 2: {{ timer2 }}</p>\n      <!-- Add more properties here -->\n    </div>\n\n\n</div>\n\n\n\n\n\n    <input v-model=\"message\" type=\"text\" placeholder=\"Type a message\" />\n    <button @click=\"sendMessage\">Send Message</button>\n    <ul>\n      <li v-for=\"message in receivedMessages\" :key=\"message\">{{ message }}</li>\n    </ul>\n  </div>\n</template>\n\n<script>\n//[{\"id\":12,\"device\":\"PLC CP1E\",\"Temp\":25.5,\"pressure\":1013.25,\"amp\":5.55,\"status\":\"Ok\",\"valve1\":\"OMRON\",\"valve1_status\":\"IOT\",\"valve2\":\"OMRON\",\"valve2_status\":\"OMRON\",\"valve3\":\"OMRON\",\"valve3_status\":\"OMRON\",\"timer1\":\"OMRON\",\"timer2\":\"OMRON\"}]\nimport { ref, onMounted, onBeforeUnmount , computed } from 'vue';\n\nexport default {\n  setup() {\n    const connectionStatus = ref('Not connected');\n    const receivedMessages = ref([]);\n    const message = ref('');\n    const dataArray = ref([\n      {\n        id: 12,\n        device: 'DEFAULT NOT CONNECTED',\n        Temp: 0,\n        pressure: 0,\n        amp: 0,\n        status: '',\n        valve1: '',\n        valve1_status: '',\n        valve2: '',\n        valve2_status: '',\n        valve3: '',\n        valve3_status: '',\n        timer1: '',\n        timer2: '',\n      },\n      // Add more objects if needed\n    ]);\n    let socket = null;\n\n    const connectWebSocket = () => {\n      // Replace with your WebSocket server URL\n      const serverUrl = 'wss://32zhhpmuta.execute-api.us-east-1.amazonaws.com/production';\n      socket = new WebSocket(serverUrl);\n\n      socket.onopen = () => {\n        connectionStatus.value = 'Connected';\n      };\n\n      socket.onmessage = (event) => {\n        console.log(event.data);\n      \n        const jsonData = event.data;\n        const newDataArray = JSON.parse(jsonData);\n\n        if (newDataArray.length > 0) {\n          dataArray.value = newDataArray;\n        }\n        //\n        receivedMessages.value.push(event.data);\n      };\n\n      socket.onerror = (error) => {\n        console.error('WebSocket error:', error);\n      };\n\n      socket.onclose = () => {\n        connectionStatus.value = 'Disconnected';\n      };\n    };\n\n    const sendMessage = () => {\n      if (socket && socket.readyState === WebSocket.OPEN) {\n        socket.send(message.value);\n        message.value = '';\n      }\n    };\n\n    onMounted(() => {\n      connectWebSocket();\n    });\n\n    onBeforeUnmount(() => {\n      if (socket) {\n        socket.close();\n      }\n    });\n    const dataObject = computed(() => dataArray.value[0]);\n\n    return {\n      id: dataObject.value.id,\n      device: dataObject.value.device,\n      temp: dataObject.value.Temp,\n      pressure: dataObject.value.pressure,\n      amp: dataObject.value.amp,\n      status: dataObject.value.status,\n      valve1: dataObject.value.valve1,\n      valve1_status: dataObject.value.valve1_status,\n      valve2: dataObject.value.valve2,\n      valve2_status: dataObject.value.valve2_status,\n      valve3: dataObject.value.valve3,\n      valve3_status: dataObject.value.valve3_status,\n      timer1: dataObject.value.timer1,\n      timer2: dataObject.value.timer2,\n      connectionStatus,\n      receivedMessages,\n      message,\n      sendMessage,\n    };\n  },\n};\n</script>\n\n<style>\n/* Add your CSS styles here */\n.image-container {\n  position: relative;\n}\n\n.overlay-text {\n  position: absolute;\n  top: 50%; /* Adjust to vertically center the text */\n  left: 50%; /* Adjust to horizontally center the text */\n  transform: translate(-50%, -50%);\n  font-size: 24px; /* Adjust as needed */\n  font-weight: bold;\n  color: red; /* Adjust the text color */\n  text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.6); /* Add a text shadow for better visibility */\n}\n</style>\n"],"mappings":";gCAEIA,mBAAA,CAAyB,YAArB,kBAAgB;;EAGfC,KAAK,EAAC;AAAiB;gCAE5BD,mBAAA,CAAuC;EAAlCE,GAAG,EAAC,YAAY;EAACC,GAAG,EAAC;;;EACrBF,KAAK,EAAC;AAAc;;uBAP3BG,mBAAA,CAqCM,cApCJC,UAAyB,EACzBL,mBAAA,CAAqC,WAAlC,UAAQ,GAAAM,gBAAA,CAAGC,MAAA,CAAAC,gBAAgB,kBAE9BR,mBAAA,CAsBE,OAtBFS,UAsBE,GApBFC,UAAuC,EACvCV,mBAAA,CAgBM,OAhBNW,UAgBM,GAfJX,mBAAA,CAAmB,WAAhB,MAAI,GAAAM,gBAAA,CAAGC,MAAA,CAAAK,EAAE,kBACZZ,mBAAA,CAA2B,WAAxB,UAAQ,GAAAM,gBAAA,CAAGC,MAAA,CAAAM,MAAM,kBACpBb,mBAAA,CAAuB,WAApB,QAAM,GAAAM,gBAAA,CAAGC,MAAA,CAAAO,IAAI,kBAChBd,mBAAA,CAA+B,WAA5B,YAAU,GAAAM,gBAAA,CAAGC,MAAA,CAAAQ,QAAQ,kBACxBf,mBAAA,CAAqB,WAAlB,OAAK,GAAAM,gBAAA,CAAGC,MAAA,CAAAS,GAAG,kBACdhB,mBAAA,CAA2B,WAAxB,UAAQ,GAAAM,gBAAA,CAAGC,MAAA,CAAAU,MAAM,kBACpBjB,mBAAA,CAA4B,WAAzB,WAAS,GAAAM,gBAAA,CAAGC,MAAA,CAAAW,MAAM,kBACrBlB,mBAAA,CAA0C,WAAvC,kBAAgB,GAAAM,gBAAA,CAAGC,MAAA,CAAAY,aAAa,kBACnCnB,mBAAA,CAA4B,WAAzB,WAAS,GAAAM,gBAAA,CAAGC,MAAA,CAAAa,MAAM,kBACrBpB,mBAAA,CAA0C,WAAvC,kBAAgB,GAAAM,gBAAA,CAAGC,MAAA,CAAAc,aAAa,kBACnCrB,mBAAA,CAA4B,WAAzB,WAAS,GAAAM,gBAAA,CAAGC,MAAA,CAAAe,MAAM,kBACrBtB,mBAAA,CAA0C,WAAvC,kBAAgB,GAAAM,gBAAA,CAAGC,MAAA,CAAAgB,aAAa,kBACnCvB,mBAAA,CAA4B,WAAzB,WAAS,GAAAM,gBAAA,CAAGC,MAAA,CAAAiB,MAAM,kBACrBxB,mBAAA,CAA4B,WAAzB,WAAS,GAAAM,gBAAA,CAAGC,MAAA,CAAAkB,MAAM,kBACrBC,mBAAA,8BAAiC,C,qBAUnC1B,mBAAA,CAAoE;+DAApDO,MAAA,CAAAoB,OAAO,GAAAC,MAAA;IAAEC,IAAI,EAAC,MAAM;IAACC,WAAW,EAAC;iDAAjCvB,MAAA,CAAAoB,OAAO,E,GACvB3B,mBAAA,CAAkD;IAAzC+B,OAAK,EAAAC,MAAA,QAAAA,MAAA,UAAAC,IAAA,KAAE1B,MAAA,CAAA2B,WAAA,IAAA3B,MAAA,CAAA2B,WAAA,IAAAD,IAAA,CAAW;KAAE,cAAY,GACzCjC,mBAAA,CAEK,c,kBADHI,mBAAA,CAAyE+B,SAAA,QAAAC,WAAA,CAAnD7B,MAAA,CAAA8B,gBAAgB,EAA3BV,OAAO;yBAAlBvB,mBAAA,CAAyE;MAAhCkC,GAAG,EAAEX;IAAO,GAAArB,gBAAA,CAAKqB,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}