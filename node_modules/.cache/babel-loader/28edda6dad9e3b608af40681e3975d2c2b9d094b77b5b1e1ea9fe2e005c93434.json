{"ast":null,"code":"import { createElementVNode as _createElementVNode, toDisplayString as _toDisplayString, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = /*#__PURE__*/_createElementVNode(\"h1\", null, \"WebSocket Connection Example\", -1 /* HOISTED */);\nconst _hoisted_2 = /*#__PURE__*/_createElementVNode(\"thead\", null, [/*#__PURE__*/_createElementVNode(\"tr\", null, [/*#__PURE__*/_createElementVNode(\"th\", null, \"ID\"), /*#__PURE__*/_createElementVNode(\"th\", null, \"Device\"), /*#__PURE__*/_createElementVNode(\"th\", null, \"Temperature\"), /*#__PURE__*/_createElementVNode(\"th\", null, \"Pressure\"), /*#__PURE__*/_createElementVNode(\"th\", null, \"Amp\"), /*#__PURE__*/_createElementVNode(\"th\", null, \"Status\"), /*#__PURE__*/_createElementVNode(\"th\", null, \"Valve 1\"), /*#__PURE__*/_createElementVNode(\"th\", null, \"Valve 1 Status\"), /*#__PURE__*/_createElementVNode(\"th\", null, \"Valve 2\"), /*#__PURE__*/_createElementVNode(\"th\", null, \"Valve 2 Status\"), /*#__PURE__*/_createElementVNode(\"th\", null, \"Valve 3\"), /*#__PURE__*/_createElementVNode(\"th\", null, \"Valve 3 Status\"), /*#__PURE__*/_createElementVNode(\"th\", null, \"Timer 1\"), /*#__PURE__*/_createElementVNode(\"th\", null, \"Timer 2\")])], -1 /* HOISTED */);\n\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", null, [_hoisted_1, _createElementVNode(\"p\", null, \"Status: \" + _toDisplayString($setup.connectionStatus), 1 /* TEXT */), _createElementVNode(\"table\", null, [_hoisted_2, _createElementVNode(\"tbody\", null, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($setup.dataArray, item => {\n    return _openBlock(), _createElementBlock(\"tr\", {\n      key: item.id\n    }, [_createElementVNode(\"td\", null, _toDisplayString(item.id), 1 /* TEXT */), _createElementVNode(\"td\", null, _toDisplayString(item.device), 1 /* TEXT */), _createElementVNode(\"td\", null, _toDisplayString(item.Temp), 1 /* TEXT */), _createElementVNode(\"td\", null, _toDisplayString(item.pressure), 1 /* TEXT */), _createElementVNode(\"td\", null, _toDisplayString(item.amp), 1 /* TEXT */), _createElementVNode(\"td\", null, _toDisplayString(item.status), 1 /* TEXT */), _createElementVNode(\"td\", null, _toDisplayString(item.valve1), 1 /* TEXT */), _createElementVNode(\"td\", null, _toDisplayString(item.valve1_status), 1 /* TEXT */), _createElementVNode(\"td\", null, _toDisplayString(item.valve2), 1 /* TEXT */), _createElementVNode(\"td\", null, _toDisplayString(item.valve2_status), 1 /* TEXT */), _createElementVNode(\"td\", null, _toDisplayString(item.valve3), 1 /* TEXT */), _createElementVNode(\"td\", null, _toDisplayString(item.valve3_status), 1 /* TEXT */), _createElementVNode(\"td\", null, _toDisplayString(item.timer1), 1 /* TEXT */), _createElementVNode(\"td\", null, _toDisplayString(item.timer2), 1 /* TEXT */)]);\n  }), 128 /* KEYED_FRAGMENT */))])])]);\n}","map":{"version":3,"names":["_createElementVNode","_createElementBlock","_hoisted_1","_toDisplayString","$setup","connectionStatus","_hoisted_2","_Fragment","_renderList","dataArray","item","key","id","device","Temp","pressure","amp","status","valve1","valve1_status","valve2","valve2_status","valve3","valve3_status","timer1","timer2"],"sources":["D:\\Project\\PROOFOFCONCEPT3\\VueJS_Flask_Socket-main\\VueJS_Flask_Socket-main\\src\\components\\HelloWorld.vue"],"sourcesContent":["<template>\n  <div>\n    <h1>WebSocket Connection Example</h1>\n    <p>Status: {{ connectionStatus }}</p>\n    <table>\n      <thead>\n        <tr>\n          <th>ID</th>\n          <th>Device</th>\n          <th>Temperature</th>\n          <th>Pressure</th>\n          <th>Amp</th>\n          <th>Status</th>\n          <th>Valve 1</th>\n          <th>Valve 1 Status</th>\n          <th>Valve 2</th>\n          <th>Valve 2 Status</th>\n          <th>Valve 3</th>\n          <th>Valve 3 Status</th>\n          <th>Timer 1</th>\n          <th>Timer 2</th>\n        </tr>\n      </thead>\n      <tbody>\n        <tr v-for=\"item in dataArray\" :key=\"item.id\">\n          <td>{{ item.id }}</td>\n          <td>{{ item.device }}</td>\n          <td>{{ item.Temp }}</td>\n          <td>{{ item.pressure }}</td>\n          <td>{{ item.amp }}</td>\n          <td>{{ item.status }}</td>\n          <td>{{ item.valve1 }}</td>\n          <td>{{ item.valve1_status }}</td>\n          <td>{{ item.valve2 }}</td>\n          <td>{{ item.valve2_status }}</td>\n          <td>{{ item.valve3 }}</td>\n          <td>{{ item.valve3_status }}</td>\n          <td>{{ item.timer1 }}</td>\n          <td>{{ item.timer2 }}</td>\n        </tr>\n      </tbody>\n    </table>\n  </div>\n</template>\n\n<script>\nimport { ref, onMounted, onBeforeUnmount } from 'vue';\n\nexport default {\n  setup() {\n    const connectionStatus = ref('Not connected');\n    const dataArray = ref([\n      {\n        id: 12,\n        device: 'DEFAULT NOT CONNECTED',\n        Temp: 0,\n        pressure: 0,\n        amp: 0,\n        status: '',\n        valve1: '',\n        valve1_status: '',\n        valve2: '',\n        valve2_status: '',\n        valve3: '',\n        valve3_status: '',\n        timer1: '',\n        timer2: '',\n      },\n    ]);\n    let socket = null;\n\n    const connectWebSocket = () => {\n      // Replace with your WebSocket server URL\n      const serverUrl = 'wss://32zhhpmuta.execute-api.us-east-1.amazonaws.com/production';\n      socket = new WebSocket(serverUrl);\n\n      socket.onopen = () => {\n        connectionStatus.value = 'Connected';\n      };\n\n      socket.onmessage = (event) => {\n        const jsonData = event.data;\n        const newDataArray = JSON.parse(jsonData);\n\n        if (newDataArray.length > 0) {\n          dataArray.value = newDataArray;\n        }\n      };\n\n      socket.onerror = (error) => {\n        console.error('WebSocket error:', error);\n      };\n\n      socket.onclose = () => {\n        connectionStatus.value = 'Disconnected';\n      };\n    };\n\n    onMounted(() => {\n      connectWebSocket();\n    });\n\n    onBeforeUnmount(() => {\n      if (socket) {\n        socket.close();\n      }\n    });\n\n    return {\n      connectionStatus,\n      dataArray,\n    };\n  },\n};\n</script>\n\n<style>\n/* Add your CSS styles here */\n</style>\n"],"mappings":";gCAEIA,mBAAA,CAAqC,YAAjC,8BAA4B;gCAG9BA,mBAAA,CAiBQ,gB,aAhBNA,mBAAA,CAeK,a,aAdHA,mBAAA,CAAW,YAAP,IAAE,G,aACNA,mBAAA,CAAe,YAAX,QAAM,G,aACVA,mBAAA,CAAoB,YAAhB,aAAW,G,aACfA,mBAAA,CAAiB,YAAb,UAAQ,G,aACZA,mBAAA,CAAY,YAAR,KAAG,G,aACPA,mBAAA,CAAe,YAAX,QAAM,G,aACVA,mBAAA,CAAgB,YAAZ,SAAO,G,aACXA,mBAAA,CAAuB,YAAnB,gBAAc,G,aAClBA,mBAAA,CAAgB,YAAZ,SAAO,G,aACXA,mBAAA,CAAuB,YAAnB,gBAAc,G,aAClBA,mBAAA,CAAgB,YAAZ,SAAO,G,aACXA,mBAAA,CAAuB,YAAnB,gBAAc,G,aAClBA,mBAAA,CAAgB,YAAZ,SAAO,G,aACXA,mBAAA,CAAgB,YAAZ,SAAO,E;;;uBAnBnBC,mBAAA,CAyCM,cAxCJC,UAAqC,EACrCF,mBAAA,CAAqC,WAAlC,UAAQ,GAAAG,gBAAA,CAAGC,MAAA,CAAAC,gBAAgB,kBAC9BL,mBAAA,CAqCQ,gBApCNM,UAiBQ,EACRN,mBAAA,CAiBQ,iB,kBAhBNC,mBAAA,CAeKM,SAAA,QAAAC,WAAA,CAfcJ,MAAA,CAAAK,SAAS,EAAjBC,IAAI;yBAAfT,mBAAA,CAeK;MAf0BU,GAAG,EAAED,IAAI,CAACE;QACvCZ,mBAAA,CAAsB,YAAAG,gBAAA,CAAfO,IAAI,CAACE,EAAE,kBACdZ,mBAAA,CAA0B,YAAAG,gBAAA,CAAnBO,IAAI,CAACG,MAAM,kBAClBb,mBAAA,CAAwB,YAAAG,gBAAA,CAAjBO,IAAI,CAACI,IAAI,kBAChBd,mBAAA,CAA4B,YAAAG,gBAAA,CAArBO,IAAI,CAACK,QAAQ,kBACpBf,mBAAA,CAAuB,YAAAG,gBAAA,CAAhBO,IAAI,CAACM,GAAG,kBACfhB,mBAAA,CAA0B,YAAAG,gBAAA,CAAnBO,IAAI,CAACO,MAAM,kBAClBjB,mBAAA,CAA0B,YAAAG,gBAAA,CAAnBO,IAAI,CAACQ,MAAM,kBAClBlB,mBAAA,CAAiC,YAAAG,gBAAA,CAA1BO,IAAI,CAACS,aAAa,kBACzBnB,mBAAA,CAA0B,YAAAG,gBAAA,CAAnBO,IAAI,CAACU,MAAM,kBAClBpB,mBAAA,CAAiC,YAAAG,gBAAA,CAA1BO,IAAI,CAACW,aAAa,kBACzBrB,mBAAA,CAA0B,YAAAG,gBAAA,CAAnBO,IAAI,CAACY,MAAM,kBAClBtB,mBAAA,CAAiC,YAAAG,gBAAA,CAA1BO,IAAI,CAACa,aAAa,kBACzBvB,mBAAA,CAA0B,YAAAG,gBAAA,CAAnBO,IAAI,CAACc,MAAM,kBAClBxB,mBAAA,CAA0B,YAAAG,gBAAA,CAAnBO,IAAI,CAACe,MAAM,iB"},"metadata":{},"sourceType":"module","externalDependencies":[]}