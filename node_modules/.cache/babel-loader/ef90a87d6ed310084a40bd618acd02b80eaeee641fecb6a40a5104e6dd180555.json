{"ast":null,"code":"//[{\"id\":12,\"device\":\"PLC CP1E\",\"Temp\":25.5,\"pressure\":1013.25,\"amp\":5.55,\"status\":\"Ok\",\"valve1\":\"OMRON\",\"valve1_status\":\"IOT\",\"valve2\":\"OMRON\",\"valve2_status\":\"OMRON\",\"valve3\":\"OMRON\",\"valve3_status\":\"OMRON\",\"timer1\":\"OMRON\",\"timer2\":\"OMRON\"}]\nimport { ref, onMounted, onBeforeUnmount } from 'vue';\nexport default {\n  setup() {\n    const connectionStatus = ref('Not connected');\n    const receivedMessages = ref([]);\n    const message = ref('');\n    const status = ref('');\n    const id = ref('');\n    const device = ref('');\n    const temp = ref('');\n    const pressure = ref('');\n    const amp = ref('');\n    const valve1 = ref('');\n    const valve1_status = ref('');\n    const valve2 = ref('');\n    const valve2_status = ref('');\n    const valve3 = ref('');\n    const valve3_status = ref('');\n    const timer1 = ref('');\n    const timer2 = ref('');\n    let socket = null;\n    const countdown = ref(0);\n    let countdownInterval;\n    const startSendingMessages = () => {\n      countdown.value = 10;\n      countdownInterval = setInterval(() => {\n        countdown.value--;\n        if (countdown.value === 0) {\n          sendMessage();\n          countdown.value = 10;\n        }\n      }, 1000);\n    };\n    const connectWebSocket = () => {\n      // Replace with your WebSocket server URL\n      const serverUrl = 'wss://32zhhpmuta.execute-api.us-east-1.amazonaws.com/production';\n      socket = new WebSocket(serverUrl);\n      socket.onopen = () => {\n        connectionStatus.value = 'Connected';\n      };\n      socket.onmessage = event => {\n        console.log(event.data);\n        const jsonData = event.data;\n        const dataArray = JSON.parse(jsonData);\n        if (dataArray.length > 0) {\n          const dataObject = dataArray[0];\n          id.value = dataObject.id;\n          device.value = dataObject.device;\n          temp.value = dataObject.Temp;\n          pressure.value = dataObject.pressure;\n          amp.value = dataObject.amp;\n          status.value = dataObject.status;\n          valve1.value = dataObject.valve1;\n          valve1_status.value = dataObject.valve1_status;\n          valve2.value = dataObject.valve2;\n          valve2_status.value = dataObject.valve2_status;\n          valve3.value = dataObject.valve3;\n          valve3_status.value = dataObject.valve3_status;\n          timer1.value = dataObject.timer1;\n          timer2.value = dataObject.timer2;\n        }\n\n        //receivedMessages.value.push(event.data);\n      };\n\n      socket.onerror = error => {\n        console.error('WebSocket error:', error);\n      };\n      socket.onclose = () => {\n        connectionStatus.value = 'Disconnected';\n      };\n    };\n    const sendMessage = () => {\n      if (socket && socket.readyState === WebSocket.OPEN) {\n        socket.send(message.value);\n        message.value = '';\n      }\n    };\n    onMounted(() => {\n      connectWebSocket();\n      startSendingMessages(); // Start countdown automatically when component is mounted\n    });\n\n    onBeforeUnmount(() => {\n      clearInterval(countdownInterval);\n      if (socket) {\n        socket.close();\n      }\n    });\n    return {\n      startSendingMessages,\n      countdown,\n      connectionStatus,\n      receivedMessages,\n      message,\n      sendMessage,\n      status,\n      id,\n      device,\n      temp,\n      pressure,\n      amp,\n      valve1,\n      valve1_status,\n      valve2,\n      valve2_status,\n      valve3,\n      valve3_status,\n      timer1,\n      timer2\n    };\n  }\n};","map":{"version":3,"names":["ref","onMounted","onBeforeUnmount","setup","connectionStatus","receivedMessages","message","status","id","device","temp","pressure","amp","valve1","valve1_status","valve2","valve2_status","valve3","valve3_status","timer1","timer2","socket","countdown","countdownInterval","startSendingMessages","value","setInterval","sendMessage","connectWebSocket","serverUrl","WebSocket","onopen","onmessage","event","console","log","data","jsonData","dataArray","JSON","parse","length","dataObject","Temp","onerror","error","onclose","readyState","OPEN","send","clearInterval","close"],"sources":["D:\\Project\\PROOFOFCONCEPT3\\VueJS_Flask_Socket-main\\VueJS_Flask_Socket-main\\src\\components\\HelloWorld.vue"],"sourcesContent":["<template>\n  <div>\n    <h1>Sterilizer SCADA</h1>\n    <p>Status: {{ connectionStatus }}</p>\n    <p v-if=\"countdown > 0\" class=\"countdown\">Refresh Timer : {{ countdown }}</p>\n\n    <input v-model=\"message\" type=\"text\" placeholder=\"Type a message\" />\n    <button @click=\"sendMessage\">Update Manually</button>\n    <ul>\n      <li v-for=\"message in receivedMessages\" :key=\"message\">{{ message }}</li>\n    </ul>\n    <div class=\"image-container\">\n \n    <img src=\"/SCADA.jpg\" alt=\"My Image\" />\n    <div class=\"data-display\">\n      <table class=\"center-table border-table\">\n        <tr>\n          <th>ID</th>\n          <th>Device</th>\n          <th>Temp</th>\n          <th>Pressure</th>\n          <th>Amp</th>\n          <th>Status</th>\n          <th>Valve 1</th>\n          <th>Valve 1 Status</th>\n          <th>Valve 2</th>\n          <th>Valve 2 Status</th>\n          <th>Valve 3</th>\n          <th>Valve 3 Status</th>\n          <th>Timer 1</th>\n          <th>Timer 2</th>\n        </tr>\n        <tr>\n          <td>{{ id }}</td>\n          <td>{{ device }}</td>\n          <td>{{ temp }}</td>\n          <td>{{ pressure }}</td>\n          <td>{{ amp }}</td>\n          <td>{{ status }}</td>\n          <td>{{ valve1 }}</td>\n          <td>{{ valve1_status }}</td>\n          <td>{{ valve2 }}</td>\n          <td>{{ valve2_status }}</td>\n          <td>{{ valve3 }}</td>\n          <td>{{ valve3_status }}</td>\n          <td>{{ timer1 }}</td>\n          <td>{{ timer2 }}</td>\n        </tr>\n      </table>\n      <!-- Add more properties here -->\n    </div>\n\n\n</div>\n\n\n\n\n\n  </div>\n</template>\n\n<script>\n//[{\"id\":12,\"device\":\"PLC CP1E\",\"Temp\":25.5,\"pressure\":1013.25,\"amp\":5.55,\"status\":\"Ok\",\"valve1\":\"OMRON\",\"valve1_status\":\"IOT\",\"valve2\":\"OMRON\",\"valve2_status\":\"OMRON\",\"valve3\":\"OMRON\",\"valve3_status\":\"OMRON\",\"timer1\":\"OMRON\",\"timer2\":\"OMRON\"}]\nimport { ref, onMounted, onBeforeUnmount } from 'vue';\n\nexport default {\n  setup() {\n    const connectionStatus = ref('Not connected');\n    const receivedMessages = ref([]);\n    const message = ref('');\n    const status = ref('');\n    const id = ref('');\n    const device = ref('');\n    const temp = ref('');\n    const pressure = ref('');\n    const amp = ref('');\n    const valve1 = ref('');\n    const valve1_status = ref('');\n    const valve2 = ref('');\n    const valve2_status = ref('');\n    const valve3 = ref('');\n    const valve3_status = ref('');\n    const timer1 = ref('');\n    const timer2 = ref('');\n    let socket = null;\n\n\n    const countdown = ref(0);\n\n\n    let countdownInterval;\n\n    const startSendingMessages = () => {\n      countdown.value = 10;\n\n      countdownInterval = setInterval(() => {\n        countdown.value--;\n        if (countdown.value === 0) {\n          sendMessage();\n          countdown.value = 10;\n        }\n      }, 1000);\n    };\n\n    const connectWebSocket = () => {\n      // Replace with your WebSocket server URL\n      const serverUrl = 'wss://32zhhpmuta.execute-api.us-east-1.amazonaws.com/production';\n      socket = new WebSocket(serverUrl);\n\n      socket.onopen = () => {\n        connectionStatus.value = 'Connected';\n      };\n\n      socket.onmessage = (event) => {\n        console.log(event.data);\n        const jsonData = event.data;\n        const dataArray = JSON.parse(jsonData);\n\n        if (dataArray.length > 0) {\n          const dataObject = dataArray[0];\n          id.value = dataObject.id;\n          device.value = dataObject.device;\n          temp.value = dataObject.Temp;\n          pressure.value = dataObject.pressure;\n          amp.value = dataObject.amp;\n          status.value = dataObject.status;\n          valve1.value = dataObject.valve1;\n          valve1_status.value = dataObject.valve1_status;\n          valve2.value = dataObject.valve2;\n          valve2_status.value = dataObject.valve2_status;\n          valve3.value = dataObject.valve3;\n          valve3_status.value = dataObject.valve3_status;\n          timer1.value = dataObject.timer1;\n          timer2.value = dataObject.timer2;\n        }\n\n        //receivedMessages.value.push(event.data);\n      };\n\n      socket.onerror = (error) => {\n        console.error('WebSocket error:', error);\n      };\n\n      socket.onclose = () => {\n        connectionStatus.value = 'Disconnected';\n      };\n    };\n\n    const sendMessage = () => {\n      if (socket && socket.readyState === WebSocket.OPEN) {\n        socket.send(message.value);\n        message.value = '';\n      }\n    };\n\n    onMounted(() => {\n      connectWebSocket();\n      startSendingMessages(); // Start countdown automatically when component is mounted\n\n    });\n\n    onBeforeUnmount(() => {\n      clearInterval(countdownInterval);\n\n      if (socket) {\n        socket.close();\n      }\n    });\n\n    return {\n      startSendingMessages,\n      countdown,\n      connectionStatus,\n      receivedMessages,\n      message,\n      sendMessage,\n      status,\n      id,\n      device,\n      temp,\n      pressure,\n      amp,\n      valve1,\n      valve1_status,\n      valve2,\n      valve2_status,\n      valve3,\n      valve3_status,\n      timer1,\n      timer2,\n     \n    };\n  },\n};\n</script>\n\n<style>\n\n.countdown {\n  font-size: 24px;\n  font-weight: bold;\n  color: red;\n  animation: countdown-animation 1s linear infinite;\n}\n\n@keyframes countdown-animation {\n  0% {\n    transform: scale(1);\n  }\n  50% {\n    transform: scale(1.1);\n  }\n  100% {\n    transform: scale(1);\n  }\n}\n\n/* Add your CSS styles here */\n.image-container {\n  position: relative;\n}\n\n.overlay-text {\n  position: absolute;\n  top: 50%; /* Adjust to vertically center the text */\n  left: 50%; /* Adjust to horizontally center the text */\n  transform: translate(-50%, -50%);\n  font-size: 24px; /* Adjust as needed */\n  font-weight: bold;\n  color: red; /* Adjust the text color */\n  text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.6); /* Add a text shadow for better visibility */\n}\n\n.center-table {\n  margin: auto;\n}\n\n.border-table {\n  border-collapse: collapse;\n  border: 1px solid black;\n}\n\n.data-display th,\n.data-display td {\n  padding: 8px;\n  text-align: center;\n  border: 1px solid black;\n}\n</style>\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}