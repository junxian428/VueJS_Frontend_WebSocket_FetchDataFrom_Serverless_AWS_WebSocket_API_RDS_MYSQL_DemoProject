{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\n//[{\"id\":12,\"device\":\"PLC CP1E\",\"Temp\":25.5,\"pressure\":1013.25,\"amp\":5.55,\"status\":\"Ok\",\"valve1\":\"OMRON\",\"valve1_status\":\"IOT\",\"valve2\":\"OMRON\",\"valve2_status\":\"OMRON\",\"valve3\":\"OMRON\",\"valve3_status\":\"OMRON\",\"timer1\":\"OMRON\",\"timer2\":\"OMRON\"}]\nimport { ref, onMounted, onBeforeUnmount, computed } from 'vue';\nexport default {\n  setup() {\n    const connectionStatus = ref('Not connected');\n    const receivedMessages = ref([]);\n    const message = ref('');\n    const dataArray = ref([{\n      id: 12,\n      device: 'DEFAULT NOT CONNECTED',\n      Temp: 0,\n      pressure: 0,\n      amp: 0,\n      status: '',\n      valve1: '',\n      valve1_status: '',\n      valve2: '',\n      valve2_status: '',\n      valve3: '',\n      valve3_status: '',\n      timer1: '',\n      timer2: ''\n    }\n    // Add more objects if needed\n    ]);\n\n    let socket = null;\n    const connectWebSocket = () => {\n      // Replace with your WebSocket server URL\n      const serverUrl = 'wss://32zhhpmuta.execute-api.us-east-1.amazonaws.com/production';\n      socket = new WebSocket(serverUrl);\n      socket.onopen = () => {\n        connectionStatus.value = 'Connected';\n      };\n      socket.onmessage = event => {\n        console.log(event.data);\n        const jsonData = event.data;\n        const newDataArray = JSON.parse(jsonData);\n        if (dataArray.length > 0) {\n          const dataObject = dataArray[0];\n          this.dataArray.id.value = dataObject.id;\n          device.value = dataObject.device;\n          temp.value = dataObject.Temp;\n          pressure.value = dataObject.pressure;\n          amp.value = dataObject.amp;\n          status.value = dataObject.status;\n          valve1.value = dataObject.valve1;\n          valve1_status.value = dataObject.valve1_status;\n          valve2.value = dataObject.valve2;\n          valve2_status.value = dataObject.valve2_status;\n          valve3.value = dataObject.valve3;\n          valve3_status.value = dataObject.valve3_status;\n          timer1.value = dataObject.timer1;\n          timer2.value = dataObject.timer2;\n        }\n        //\n        receivedMessages.value.push(event.data);\n      };\n      socket.onerror = error => {\n        console.error('WebSocket error:', error);\n      };\n      socket.onclose = () => {\n        connectionStatus.value = 'Disconnected';\n      };\n    };\n    const sendMessage = () => {\n      if (socket && socket.readyState === WebSocket.OPEN) {\n        socket.send(message.value);\n        message.value = '';\n      }\n    };\n    onMounted(() => {\n      connectWebSocket();\n    });\n    onBeforeUnmount(() => {\n      if (socket) {\n        socket.close();\n      }\n    });\n    const dataObject = computed(() => dataArray.value[0]);\n    return {\n      id: dataObject.value.id,\n      device: dataObject.value.device,\n      temp: dataObject.value.Temp,\n      pressure: dataObject.value.pressure,\n      amp: dataObject.value.amp,\n      status: dataObject.value.status,\n      valve1: dataObject.value.valve1,\n      valve1_status: dataObject.value.valve1_status,\n      valve2: dataObject.value.valve2,\n      valve2_status: dataObject.value.valve2_status,\n      valve3: dataObject.value.valve3,\n      valve3_status: dataObject.value.valve3_status,\n      timer1: dataObject.value.timer1,\n      timer2: dataObject.value.timer2,\n      connectionStatus,\n      receivedMessages,\n      message,\n      sendMessage\n    };\n  }\n};","map":{"version":3,"names":["ref","onMounted","onBeforeUnmount","computed","setup","connectionStatus","receivedMessages","message","dataArray","id","device","Temp","pressure","amp","status","valve1","valve1_status","valve2","valve2_status","valve3","valve3_status","timer1","timer2","socket","connectWebSocket","serverUrl","WebSocket","onopen","value","onmessage","event","console","log","data","jsonData","newDataArray","JSON","parse","length","dataObject","temp","push","onerror","error","onclose","sendMessage","readyState","OPEN","send","close"],"sources":["D:\\Project\\PROOFOFCONCEPT3\\VueJS_Flask_Socket-main\\VueJS_Flask_Socket-main\\src\\components\\HelloWorld.vue"],"sourcesContent":["<template>\n  <div>\n    <h1>Sterilizer SCADA</h1>\n    <p>Status: {{ connectionStatus }}</p>\n\n    <input v-model=\"message\" type=\"text\" placeholder=\"Type a message\" />\n    <button @click=\"sendMessage\">Send Message</button>\n    <ul>\n      <li v-for=\"message in receivedMessages\" :key=\"message\">{{ message }}</li>\n    </ul>\n    <div class=\"image-container\">\n \n    <img src=\"/SCADA.jpg\" alt=\"My Image\" />\n    <div class=\"data-display\">\n      <p>ID: {{ id }}</p>\n      <p>Device: {{ device }}</p>\n      <p>Temp: {{ temp }}</p>\n      <p>Pressure: {{ pressure }}</p>\n      <p>Amp: {{ amp }}</p>\n      <p>Status: {{ status }}</p>\n      <p>Valve 1: {{ valve1 }}</p>\n      <p>Valve 1 Status: {{ valve1_status }}</p>\n      <p>Valve 2: {{ valve2 }}</p>\n      <p>Valve 2 Status: {{ valve2_status }}</p>\n      <p>Valve 3: {{ valve3 }}</p>\n      <p>Valve 3 Status: {{ valve3_status }}</p>\n      <p>Timer 1: {{ timer1 }}</p>\n      <p>Timer 2: {{ timer2 }}</p>\n      <!-- Add more properties here -->\n    </div>\n\n\n</div>\n\n\n\n\n\n  </div>\n</template>\n\n<script>\n//[{\"id\":12,\"device\":\"PLC CP1E\",\"Temp\":25.5,\"pressure\":1013.25,\"amp\":5.55,\"status\":\"Ok\",\"valve1\":\"OMRON\",\"valve1_status\":\"IOT\",\"valve2\":\"OMRON\",\"valve2_status\":\"OMRON\",\"valve3\":\"OMRON\",\"valve3_status\":\"OMRON\",\"timer1\":\"OMRON\",\"timer2\":\"OMRON\"}]\nimport { ref, onMounted, onBeforeUnmount , computed } from 'vue';\n\nexport default {\n  setup() {\n    const connectionStatus = ref('Not connected');\n    const receivedMessages = ref([]);\n    const message = ref('');\n    const dataArray = ref([\n      {\n        id: 12,\n        device: 'DEFAULT NOT CONNECTED',\n        Temp: 0,\n        pressure: 0,\n        amp: 0,\n        status: '',\n        valve1: '',\n        valve1_status: '',\n        valve2: '',\n        valve2_status: '',\n        valve3: '',\n        valve3_status: '',\n        timer1: '',\n        timer2: '',\n      },\n      // Add more objects if needed\n    ]);\n    let socket = null;\n\n    const connectWebSocket = () => {\n      // Replace with your WebSocket server URL\n      const serverUrl = 'wss://32zhhpmuta.execute-api.us-east-1.amazonaws.com/production';\n      socket = new WebSocket(serverUrl);\n\n      socket.onopen = () => {\n        connectionStatus.value = 'Connected';\n      };\n\n      socket.onmessage = (event) => {\n        console.log(event.data);\n      \n        const jsonData = event.data;\n        const newDataArray = JSON.parse(jsonData);\n\n        if (dataArray.length > 0) {\n          const dataObject = dataArray[0];\n          this.dataArray.id.value = dataObject.id;\n          device.value = dataObject.device;\n          temp.value = dataObject.Temp;\n          pressure.value = dataObject.pressure;\n          amp.value = dataObject.amp;\n          status.value = dataObject.status;\n          valve1.value = dataObject.valve1;\n          valve1_status.value = dataObject.valve1_status;\n          valve2.value = dataObject.valve2;\n          valve2_status.value = dataObject.valve2_status;\n          valve3.value = dataObject.valve3;\n          valve3_status.value = dataObject.valve3_status;\n          timer1.value = dataObject.timer1;\n          timer2.value = dataObject.timer2;\n        }\n        //\n        receivedMessages.value.push(event.data);\n      };\n\n      socket.onerror = (error) => {\n        console.error('WebSocket error:', error);\n      };\n\n      socket.onclose = () => {\n        connectionStatus.value = 'Disconnected';\n      };\n    };\n\n    const sendMessage = () => {\n      if (socket && socket.readyState === WebSocket.OPEN) {\n        socket.send(message.value);\n        message.value = '';\n      }\n    };\n\n    onMounted(() => {\n      connectWebSocket();\n    });\n\n    onBeforeUnmount(() => {\n      if (socket) {\n        socket.close();\n      }\n    });\n    const dataObject = computed(() => dataArray.value[0]);\n\n    return {\n      id: dataObject.value.id,\n      device: dataObject.value.device,\n      temp: dataObject.value.Temp,\n      pressure: dataObject.value.pressure,\n      amp: dataObject.value.amp,\n      status: dataObject.value.status,\n      valve1: dataObject.value.valve1,\n      valve1_status: dataObject.value.valve1_status,\n      valve2: dataObject.value.valve2,\n      valve2_status: dataObject.value.valve2_status,\n      valve3: dataObject.value.valve3,\n      valve3_status: dataObject.value.valve3_status,\n      timer1: dataObject.value.timer1,\n      timer2: dataObject.value.timer2,\n      connectionStatus,\n      receivedMessages,\n      message,\n      sendMessage,\n    };\n  },\n};\n</script>\n\n<style>\n/* Add your CSS styles here */\n.image-container {\n  position: relative;\n}\n\n.overlay-text {\n  position: absolute;\n  top: 50%; /* Adjust to vertically center the text */\n  left: 50%; /* Adjust to horizontally center the text */\n  transform: translate(-50%, -50%);\n  font-size: 24px; /* Adjust as needed */\n  font-weight: bold;\n  color: red; /* Adjust the text color */\n  text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.6); /* Add a text shadow for better visibility */\n}\n</style>\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}