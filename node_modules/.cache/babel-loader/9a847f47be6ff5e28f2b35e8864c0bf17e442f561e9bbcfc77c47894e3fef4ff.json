{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { ref, onMounted, onBeforeUnmount } from 'vue';\nexport default {\n  setup() {\n    const connectionStatus = ref('Not connected');\n    const receivedMessages = ref([]);\n    const message = ref('');\n    let socket = null;\n    const connectWebSocket = () => {\n      // Replace with your WebSocket server URL\n      const serverUrl = 'wss://32zhhpmuta.execute-api.us-east-1.amazonaws.com/production';\n      socket = new WebSocket(serverUrl);\n      socket.onopen = () => {\n        connectionStatus.value = 'Connected';\n      };\n      socket.onmessage = event => {\n        receivedMessages.value.push(event.data);\n      };\n      socket.onerror = error => {\n        console.error('WebSocket error:', error);\n      };\n      socket.onclose = () => {\n        connectionStatus.value = 'Disconnected';\n      };\n    };\n    const sendMessage = () => {\n      if (socket && socket.readyState === WebSocket.OPEN) {\n        socket.send(message.value);\n        message.value = '';\n      }\n    };\n    onMounted(() => {\n      connectWebSocket();\n    });\n    onBeforeUnmount(() => {\n      if (socket) {\n        socket.close();\n      }\n    });\n    return {\n      connectionStatus,\n      receivedMessages,\n      message,\n      sendMessage\n    };\n  }\n};","map":{"version":3,"names":["ref","onMounted","onBeforeUnmount","setup","connectionStatus","receivedMessages","message","socket","connectWebSocket","serverUrl","WebSocket","onopen","value","onmessage","event","push","data","onerror","error","console","onclose","sendMessage","readyState","OPEN","send","close"],"sources":["D:\\Project\\PROOFOFCONCEPT3\\VueJS_Flask_Socket-main\\VueJS_Flask_Socket-main\\src\\components\\HelloWorld.vue"],"sourcesContent":["<template>\n  <div>\n    <h1>Sterilizer SCADA</h1>\n\n    <div class=\"image-container\">\n\n    <img src=\"/SCADA.jpg\" alt=\"My Image\" />\n    <p class=\"overlay-text\">Image</p>\n\n\n</div>\n\n\n\n    <p>Status: {{ connectionStatus }}</p>\n\n\n    <input v-model=\"message\" type=\"text\" placeholder=\"Type a message\" />\n    <button @click=\"sendMessage\">Send Message</button>\n    <ul>\n      <li v-for=\"message in receivedMessages\" :key=\"message\">{{ message }}</li>\n    </ul>\n  </div>\n</template>\n\n<script>\nimport { ref, onMounted, onBeforeUnmount } from 'vue';\n\nexport default {\n  setup() {\n    const connectionStatus = ref('Not connected');\n    const receivedMessages = ref([]);\n    const message = ref('');\n    let socket = null;\n\n    const connectWebSocket = () => {\n      // Replace with your WebSocket server URL\n      const serverUrl = 'wss://32zhhpmuta.execute-api.us-east-1.amazonaws.com/production';\n      socket = new WebSocket(serverUrl);\n\n      socket.onopen = () => {\n        connectionStatus.value = 'Connected';\n      };\n\n      socket.onmessage = (event) => {\n        receivedMessages.value.push(event.data);\n      };\n\n      socket.onerror = (error) => {\n        console.error('WebSocket error:', error);\n      };\n\n      socket.onclose = () => {\n        connectionStatus.value = 'Disconnected';\n      };\n    };\n\n    const sendMessage = () => {\n      if (socket && socket.readyState === WebSocket.OPEN) {\n        socket.send(message.value);\n        message.value = '';\n      }\n    };\n\n    onMounted(() => {\n      connectWebSocket();\n    });\n\n    onBeforeUnmount(() => {\n      if (socket) {\n        socket.close();\n      }\n    });\n\n    return {\n      connectionStatus,\n      receivedMessages,\n      message,\n      sendMessage,\n    };\n  },\n};\n</script>\n\n<style>\n/* Add your CSS styles here */\n.image-container {\n  position: relative;\n}\n\n.overlay-text {\n  position: absolute;\n  top: 50%; /* Adjust to vertically center the text */\n  left: 50%; /* Adjust to horizontally center the text */\n  transform: translate(-50%, -50%);\n  font-size: 24px; /* Adjust as needed */\n  font-weight: bold;\n  color: red; /* Adjust the text color */\n  text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.6); /* Add a text shadow for better visibility */\n}\n</style>\n"],"mappings":";AA0BA,SAASA,GAAG,EAAEC,SAAS,EAAEC,eAAc,QAAS,KAAK;AAErD,eAAe;EACbC,KAAKA,CAAA,EAAG;IACN,MAAMC,gBAAe,GAAIJ,GAAG,CAAC,eAAe,CAAC;IAC7C,MAAMK,gBAAe,GAAIL,GAAG,CAAC,EAAE,CAAC;IAChC,MAAMM,OAAM,GAAIN,GAAG,CAAC,EAAE,CAAC;IACvB,IAAIO,MAAK,GAAI,IAAI;IAEjB,MAAMC,gBAAe,GAAIA,CAAA,KAAM;MAC7B;MACA,MAAMC,SAAQ,GAAI,iEAAiE;MACnFF,MAAK,GAAI,IAAIG,SAAS,CAACD,SAAS,CAAC;MAEjCF,MAAM,CAACI,MAAK,GAAI,MAAM;QACpBP,gBAAgB,CAACQ,KAAI,GAAI,WAAW;MACtC,CAAC;MAEDL,MAAM,CAACM,SAAQ,GAAKC,KAAK,IAAK;QAC5BT,gBAAgB,CAACO,KAAK,CAACG,IAAI,CAACD,KAAK,CAACE,IAAI,CAAC;MACzC,CAAC;MAEDT,MAAM,CAACU,OAAM,GAAKC,KAAK,IAAK;QAC1BC,OAAO,CAACD,KAAK,CAAC,kBAAkB,EAAEA,KAAK,CAAC;MAC1C,CAAC;MAEDX,MAAM,CAACa,OAAM,GAAI,MAAM;QACrBhB,gBAAgB,CAACQ,KAAI,GAAI,cAAc;MACzC,CAAC;IACH,CAAC;IAED,MAAMS,WAAU,GAAIA,CAAA,KAAM;MACxB,IAAId,MAAK,IAAKA,MAAM,CAACe,UAAS,KAAMZ,SAAS,CAACa,IAAI,EAAE;QAClDhB,MAAM,CAACiB,IAAI,CAAClB,OAAO,CAACM,KAAK,CAAC;QAC1BN,OAAO,CAACM,KAAI,GAAI,EAAE;MACpB;IACF,CAAC;IAEDX,SAAS,CAAC,MAAM;MACdO,gBAAgB,CAAC,CAAC;IACpB,CAAC,CAAC;IAEFN,eAAe,CAAC,MAAM;MACpB,IAAIK,MAAM,EAAE;QACVA,MAAM,CAACkB,KAAK,CAAC,CAAC;MAChB;IACF,CAAC,CAAC;IAEF,OAAO;MACLrB,gBAAgB;MAChBC,gBAAgB;MAChBC,OAAO;MACPe;IACF,CAAC;EACH;AACF,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}