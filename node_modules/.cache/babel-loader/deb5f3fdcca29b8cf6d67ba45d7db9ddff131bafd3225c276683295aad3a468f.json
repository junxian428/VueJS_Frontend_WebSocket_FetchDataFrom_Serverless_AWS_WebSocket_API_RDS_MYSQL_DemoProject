{"ast":null,"code":"import { createElementVNode as _createElementVNode, toDisplayString as _toDisplayString, openBlock as _openBlock, createElementBlock as _createElementBlock, createCommentVNode as _createCommentVNode, vModelText as _vModelText, withDirectives as _withDirectives, renderList as _renderList, Fragment as _Fragment } from \"vue\";\nconst _hoisted_1 = /*#__PURE__*/_createElementVNode(\"h1\", null, \"Sterilizer SCADA\", -1 /* HOISTED */);\nconst _hoisted_2 = {\n  key: 0,\n  class: \"countdown\"\n};\nconst _hoisted_3 = {\n  class: \"image-container\"\n};\nconst _hoisted_4 = /*#__PURE__*/_createElementVNode(\"img\", {\n  src: \"/SCADA.jpg\",\n  alt: \"My Image\"\n}, null, -1 /* HOISTED */);\nconst _hoisted_5 = {\n  class: \"data-display\"\n};\nconst _hoisted_6 = {\n  class: \"center-table border-table\"\n};\nconst _hoisted_7 = /*#__PURE__*/_createElementVNode(\"tr\", null, [/*#__PURE__*/_createElementVNode(\"th\", null, \"ID\"), /*#__PURE__*/_createElementVNode(\"th\", null, \"Device\"), /*#__PURE__*/_createElementVNode(\"th\", null, \"Temp\"), /*#__PURE__*/_createElementVNode(\"th\", null, \"Pressure\"), /*#__PURE__*/_createElementVNode(\"th\", null, \"Amp\"), /*#__PURE__*/_createElementVNode(\"th\", null, \"Status\"), /*#__PURE__*/_createElementVNode(\"th\", null, \"Valve 1\"), /*#__PURE__*/_createElementVNode(\"th\", null, \"Valve 1 Status\"), /*#__PURE__*/_createElementVNode(\"th\", null, \"Valve 2\"), /*#__PURE__*/_createElementVNode(\"th\", null, \"Valve 2 Status\"), /*#__PURE__*/_createElementVNode(\"th\", null, \"Valve 3\"), /*#__PURE__*/_createElementVNode(\"th\", null, \"Valve 3 Status\"), /*#__PURE__*/_createElementVNode(\"th\", null, \"Timer 1\"), /*#__PURE__*/_createElementVNode(\"th\", null, \"Timer 2\")], -1 /* HOISTED */);\n\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", null, [_hoisted_1, _createElementVNode(\"p\", null, \"Status: \" + _toDisplayString($setup.connectionStatus), 1 /* TEXT */), $setup.countdown > 0 ? (_openBlock(), _createElementBlock(\"p\", _hoisted_2, \"Refresh Timer : \" + _toDisplayString($setup.countdown), 1 /* TEXT */)) : _createCommentVNode(\"v-if\", true), _withDirectives(_createElementVNode(\"input\", {\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => $setup.message = $event),\n    type: \"text\",\n    placeholder: \"Type a message\"\n  }, null, 512 /* NEED_PATCH */), [[_vModelText, $setup.message]]), _createElementVNode(\"button\", {\n    onClick: _cache[1] || (_cache[1] = (...args) => $setup.sendMessage && $setup.sendMessage(...args))\n  }, \"Update Manually\"), _createElementVNode(\"ul\", null, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($setup.receivedMessages, message => {\n    return _openBlock(), _createElementBlock(\"li\", {\n      key: message\n    }, _toDisplayString(message), 1 /* TEXT */);\n  }), 128 /* KEYED_FRAGMENT */))]), _createElementVNode(\"div\", _hoisted_3, [_hoisted_4, _createElementVNode(\"div\", _hoisted_5, [_createElementVNode(\"table\", _hoisted_6, [_hoisted_7, _createElementVNode(\"tr\", null, [_createElementVNode(\"td\", null, _toDisplayString($setup.id), 1 /* TEXT */), _createElementVNode(\"td\", null, _toDisplayString($setup.device), 1 /* TEXT */), _createElementVNode(\"td\", null, _toDisplayString($setup.temp), 1 /* TEXT */), _createElementVNode(\"td\", null, _toDisplayString($setup.pressure), 1 /* TEXT */), _createElementVNode(\"td\", null, _toDisplayString($setup.amp), 1 /* TEXT */), _createElementVNode(\"td\", null, _toDisplayString($setup.status), 1 /* TEXT */), _createElementVNode(\"td\", null, _toDisplayString($setup.valve1), 1 /* TEXT */), _createElementVNode(\"td\", null, _toDisplayString($setup.valve1_status), 1 /* TEXT */), _createElementVNode(\"td\", null, _toDisplayString($setup.valve2), 1 /* TEXT */), _createElementVNode(\"td\", null, _toDisplayString($setup.valve2_status), 1 /* TEXT */), _createElementVNode(\"td\", null, _toDisplayString($setup.valve3), 1 /* TEXT */), _createElementVNode(\"td\", null, _toDisplayString($setup.valve3_status), 1 /* TEXT */), _createElementVNode(\"td\", null, _toDisplayString($setup.timer1), 1 /* TEXT */), _createElementVNode(\"td\", null, _toDisplayString($setup.timer2), 1 /* TEXT */)])]), _createCommentVNode(\" Add more properties here \")])])]);\n}","map":{"version":3,"names":["_createElementVNode","class","src","alt","_createElementBlock","_hoisted_1","_toDisplayString","$setup","connectionStatus","countdown","_hoisted_2","message","$event","type","placeholder","onClick","_cache","args","sendMessage","_Fragment","_renderList","receivedMessages","key","_hoisted_3","_hoisted_4","_hoisted_5","_hoisted_6","_hoisted_7","id","device","temp","pressure","amp","status","valve1","valve1_status","valve2","valve2_status","valve3","valve3_status","timer1","timer2","_createCommentVNode"],"sources":["D:\\Project\\PROOFOFCONCEPT3\\VueJS_Flask_Socket-main\\VueJS_Flask_Socket-main\\src\\components\\HelloWorld.vue"],"sourcesContent":["<template>\n  <div>\n    <h1>Sterilizer SCADA</h1>\n    <p>Status: {{ connectionStatus }}</p>\n    <p v-if=\"countdown > 0\" class=\"countdown\">Refresh Timer : {{ countdown }}</p>\n\n    <input v-model=\"message\" type=\"text\" placeholder=\"Type a message\" />\n    <button @click=\"sendMessage\">Update Manually</button>\n    <ul>\n      <li v-for=\"message in receivedMessages\" :key=\"message\">{{ message }}</li>\n    </ul>\n    <div class=\"image-container\">\n \n    <img src=\"/SCADA.jpg\" alt=\"My Image\" />\n    <div class=\"data-display\">\n      <table class=\"center-table border-table\">\n        <tr>\n          <th>ID</th>\n          <th>Device</th>\n          <th>Temp</th>\n          <th>Pressure</th>\n          <th>Amp</th>\n          <th>Status</th>\n          <th>Valve 1</th>\n          <th>Valve 1 Status</th>\n          <th>Valve 2</th>\n          <th>Valve 2 Status</th>\n          <th>Valve 3</th>\n          <th>Valve 3 Status</th>\n          <th>Timer 1</th>\n          <th>Timer 2</th>\n        </tr>\n        <tr>\n          <td>{{ id }}</td>\n          <td>{{ device }}</td>\n          <td>{{ temp }}</td>\n          <td>{{ pressure }}</td>\n          <td>{{ amp }}</td>\n          <td>{{ status }}</td>\n          <td>{{ valve1 }}</td>\n          <td>{{ valve1_status }}</td>\n          <td>{{ valve2 }}</td>\n          <td>{{ valve2_status }}</td>\n          <td>{{ valve3 }}</td>\n          <td>{{ valve3_status }}</td>\n          <td>{{ timer1 }}</td>\n          <td>{{ timer2 }}</td>\n        </tr>\n      </table>\n      <!-- Add more properties here -->\n    </div>\n\n\n</div>\n\n\n\n\n\n  </div>\n</template>\n\n<script>\n//[{\"id\":12,\"device\":\"PLC CP1E\",\"Temp\":25.5,\"pressure\":1013.25,\"amp\":5.55,\"status\":\"Ok\",\"valve1\":\"OMRON\",\"valve1_status\":\"IOT\",\"valve2\":\"OMRON\",\"valve2_status\":\"OMRON\",\"valve3\":\"OMRON\",\"valve3_status\":\"OMRON\",\"timer1\":\"OMRON\",\"timer2\":\"OMRON\"}]\nimport { ref, onMounted, onBeforeUnmount } from 'vue';\n\nexport default {\n  setup() {\n    const connectionStatus = ref('Not connected');\n    const receivedMessages = ref([]);\n    const message = ref('');\n    const status = ref('');\n    const id = ref('');\n    const device = ref('');\n    const temp = ref('');\n    const pressure = ref('');\n    const amp = ref('');\n    const valve1 = ref('');\n    const valve1_status = ref('');\n    const valve2 = ref('');\n    const valve2_status = ref('');\n    const valve3 = ref('');\n    const valve3_status = ref('');\n    const timer1 = ref('');\n    const timer2 = ref('');\n    let socket = null;\n\n\n    const countdown = ref(0);\n\n\n    let countdownInterval;\n\n    const startSendingMessages = () => {\n      countdown.value = 10;\n\n      countdownInterval = setInterval(() => {\n        countdown.value--;\n        if (countdown.value === 0) {\n          sendMessage();\n          countdown.value = 10;\n        }\n      }, 1000);\n    };\n\n    const connectWebSocket = () => {\n      // Replace with your WebSocket server URL\n      const serverUrl = 'wss://32zhhpmuta.execute-api.us-east-1.amazonaws.com/production';\n      socket = new WebSocket(serverUrl);\n\n      socket.onopen = () => {\n        connectionStatus.value = 'Connected';\n      };\n\n      socket.onmessage = (event) => {\n        console.log(event.data);\n        const jsonData = event.data;\n        const dataArray = JSON.parse(jsonData);\n\n        if (dataArray.length > 0) {\n          const dataObject = dataArray[0];\n          id.value = dataObject.id;\n          device.value = dataObject.device;\n          temp.value = dataObject.Temp;\n          pressure.value = dataObject.pressure;\n          amp.value = dataObject.amp;\n          status.value = dataObject.status;\n          valve1.value = dataObject.valve1;\n          valve1_status.value = dataObject.valve1_status;\n          valve2.value = dataObject.valve2;\n          valve2_status.value = dataObject.valve2_status;\n          valve3.value = dataObject.valve3;\n          valve3_status.value = dataObject.valve3_status;\n          timer1.value = dataObject.timer1;\n          timer2.value = dataObject.timer2;\n        }\n\n        receivedMessages.value.push(event.data);\n      };\n\n      socket.onerror = (error) => {\n        console.error('WebSocket error:', error);\n      };\n\n      socket.onclose = () => {\n        connectionStatus.value = 'Disconnected';\n      };\n    };\n\n    const sendMessage = () => {\n      if (socket && socket.readyState === WebSocket.OPEN) {\n        socket.send(message.value);\n        message.value = '';\n      }\n    };\n\n    onMounted(() => {\n      connectWebSocket();\n      startSendingMessages(); // Start countdown automatically when component is mounted\n\n    });\n\n    onBeforeUnmount(() => {\n      clearInterval(countdownInterval);\n\n      if (socket) {\n        socket.close();\n      }\n    });\n\n    return {\n      startSendingMessages,\n      countdown,\n      connectionStatus,\n      receivedMessages,\n      message,\n      sendMessage,\n      status,\n      id,\n      device,\n      temp,\n      pressure,\n      amp,\n      valve1,\n      valve1_status,\n      valve2,\n      valve2_status,\n      valve3,\n      valve3_status,\n      timer1,\n      timer2,\n     \n    };\n  },\n};\n</script>\n\n<style>\n\n.countdown {\n  font-size: 24px;\n  font-weight: bold;\n  color: red;\n  animation: countdown-animation 1s linear infinite;\n}\n\n@keyframes countdown-animation {\n  0% {\n    transform: scale(1);\n  }\n  50% {\n    transform: scale(1.1);\n  }\n  100% {\n    transform: scale(1);\n  }\n}\n\n/* Add your CSS styles here */\n.image-container {\n  position: relative;\n}\n\n.overlay-text {\n  position: absolute;\n  top: 50%; /* Adjust to vertically center the text */\n  left: 50%; /* Adjust to horizontally center the text */\n  transform: translate(-50%, -50%);\n  font-size: 24px; /* Adjust as needed */\n  font-weight: bold;\n  color: red; /* Adjust the text color */\n  text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.6); /* Add a text shadow for better visibility */\n}\n\n.center-table {\n  margin: auto;\n}\n\n.border-table {\n  border-collapse: collapse;\n  border: 1px solid black;\n}\n\n.data-display th,\n.data-display td {\n  padding: 8px;\n  text-align: center;\n  border: 1px solid black;\n}\n</style>\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}