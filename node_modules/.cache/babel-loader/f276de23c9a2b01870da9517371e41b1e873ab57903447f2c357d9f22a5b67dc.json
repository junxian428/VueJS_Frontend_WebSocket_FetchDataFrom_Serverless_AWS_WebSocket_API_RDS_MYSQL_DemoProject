{"ast":null,"code":"import { createElementVNode as _createElementVNode, toDisplayString as _toDisplayString, vModelText as _vModelText, withDirectives as _withDirectives, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = /*#__PURE__*/_createElementVNode(\"h1\", null, \"Sterilizer SCADA\", -1 /* HOISTED */);\nconst _hoisted_2 = /*#__PURE__*/_createElementVNode(\"div\", {\n  class: \"image-container\"\n}, [/*#__PURE__*/_createElementVNode(\"img\", {\n  src: \"/SCADA.jpg\",\n  alt: \"My Image\"\n}), /*#__PURE__*/_createElementVNode(\"p\", {\n  class: \"overlay-text\"\n}, \"Image\")], -1 /* HOISTED */);\n\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", null, [_hoisted_1, _hoisted_2, _createElementVNode(\"p\", null, \"Status: \" + _toDisplayString($setup.connectionStatus), 1 /* TEXT */), _withDirectives(_createElementVNode(\"input\", {\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => $setup.message = $event),\n    type: \"text\",\n    placeholder: \"Type a message\"\n  }, null, 512 /* NEED_PATCH */), [[_vModelText, $setup.message]]), _createElementVNode(\"button\", {\n    onClick: _cache[1] || (_cache[1] = (...args) => $setup.sendMessage && $setup.sendMessage(...args))\n  }, \"Send Message\"), _createElementVNode(\"ul\", null, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($setup.receivedMessages, message => {\n    return _openBlock(), _createElementBlock(\"li\", {\n      key: message\n    }, _toDisplayString(message), 1 /* TEXT */);\n  }), 128 /* KEYED_FRAGMENT */))])]);\n}","map":{"version":3,"names":["_createElementVNode","class","src","alt","_createElementBlock","_hoisted_1","_hoisted_2","_toDisplayString","$setup","connectionStatus","message","$event","type","placeholder","onClick","_cache","args","sendMessage","_Fragment","_renderList","receivedMessages","key"],"sources":["D:\\Project\\PROOFOFCONCEPT3\\VueJS_Flask_Socket-main\\VueJS_Flask_Socket-main\\src\\components\\HelloWorld.vue"],"sourcesContent":["<template>\n  <div>\n    <h1>Sterilizer SCADA</h1>\n\n    <div class=\"image-container\">\n\n    <img src=\"/SCADA.jpg\" alt=\"My Image\" />\n    <p class=\"overlay-text\">Image</p>\n\n\n</div>\n\n\n\n    <p>Status: {{ connectionStatus }}</p>\n\n\n    <input v-model=\"message\" type=\"text\" placeholder=\"Type a message\" />\n    <button @click=\"sendMessage\">Send Message</button>\n    <ul>\n      <li v-for=\"message in receivedMessages\" :key=\"message\">{{ message }}</li>\n    </ul>\n  </div>\n</template>\n\n<script>\n//[{\"id\":12,\"device\":\"PLC CP1E\",\"Temp\":25.5,\"pressure\":1013.25,\"amp\":5.55,\"status\":\"Ok\",\"valve1\":\"OMRON\",\"valve1_status\":\"IOT\",\"valve2\":\"OMRON\",\"valve2_status\":\"OMRON\",\"valve3\":\"OMRON\",\"valve3_status\":\"OMRON\",\"timer1\":\"OMRON\",\"timer2\":\"OMRON\"}]\nimport { ref, onMounted, onBeforeUnmount } from 'vue';\n\nexport default {\n  setup() {\n    const connectionStatus = ref('Not connected');\n    const receivedMessages = ref([]);\n    const message = ref('');\n    let socket = null;\n\n    const connectWebSocket = () => {\n      // Replace with your WebSocket server URL\n      const serverUrl = 'wss://32zhhpmuta.execute-api.us-east-1.amazonaws.com/production';\n      socket = new WebSocket(serverUrl);\n\n      socket.onopen = () => {\n        connectionStatus.value = 'Connected';\n      };\n\n      socket.onmessage = (event) => {\n        console.log(event.data);\n        const jsonData = event.data;\n        // Parse the JSON array\n        const dataArray = JSON.parse(jsonData);\n        //\n\n        if (dataArray.length > 0) {\n  const dataObject = dataArray[0];\n  const id = dataObject.id;\n  const device = dataObject.device;\n  const temp = dataObject.Temp;\n  const pressure = dataObject.pressure;\n  const amp = dataObject.amp;\n  const status = dataObject.status;\n  const valve1 = dataObject.valve1;\n  const valve1Status = dataObject.valve1_status;\n  const valve2 = dataObject.valve2;\n  const valve2Status = dataObject.valve2_status;\n  const valve3 = dataObject.valve3;\n  const valve3Status = dataObject.valve3_status;\n  const timer1 = dataObject.timer1;\n  const timer2 = dataObject.timer2;\n\n  console.log('id:', id);\n  console.log('device:', device);\n  console.log('temp:', temp);\n  console.log('pressure:', pressure);\n  console.log('amp:', amp);\n  console.log('status:', status);\n  console.log('valve1:', valve1);\n  console.log('valve1Status:', valve1Status);\n  console.log('valve2:', valve2);\n  console.log('valve2Status:', valve2Status);\n  console.log('valve3:', valve3);\n  console.log('valve3Status:', valve3Status);\n  console.log('timer1:', timer1);\n  console.log('timer2:', timer2);\n}\n\n        //\n        receivedMessages.value.push(event.data);\n      };\n\n      socket.onerror = (error) => {\n        console.error('WebSocket error:', error);\n      };\n\n      socket.onclose = () => {\n        connectionStatus.value = 'Disconnected';\n      };\n    };\n\n    const sendMessage = () => {\n      if (socket && socket.readyState === WebSocket.OPEN) {\n        socket.send(message.value);\n        message.value = '';\n      }\n    };\n\n    onMounted(() => {\n      connectWebSocket();\n    });\n\n    onBeforeUnmount(() => {\n      if (socket) {\n        socket.close();\n      }\n    });\n\n    return {\n      connectionStatus,\n      receivedMessages,\n      message,\n      sendMessage,\n    };\n  },\n};\n</script>\n\n<style>\n/* Add your CSS styles here */\n.image-container {\n  position: relative;\n}\n\n.overlay-text {\n  position: absolute;\n  top: 50%; /* Adjust to vertically center the text */\n  left: 50%; /* Adjust to horizontally center the text */\n  transform: translate(-50%, -50%);\n  font-size: 24px; /* Adjust as needed */\n  font-weight: bold;\n  color: red; /* Adjust the text color */\n  text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.6); /* Add a text shadow for better visibility */\n}\n</style>\n"],"mappings":";gCAEIA,mBAAA,CAAyB,YAArB,kBAAgB;gCAEpBA,mBAAA,CAME;EANGC,KAAK,EAAC;AAAiB,I,aAE5BD,mBAAA,CAAuC;EAAlCE,GAAG,EAAC,YAAY;EAACC,GAAG,EAAC;iBAC1BH,mBAAA,CAAiC;EAA9BC,KAAK,EAAC;AAAc,GAAC,OAAK,E;;;uBAN/BG,mBAAA,CAqBM,cApBJC,UAAyB,EAEzBC,UAME,EAIFN,mBAAA,CAAqC,WAAlC,UAAQ,GAAAO,gBAAA,CAAGC,MAAA,CAAAC,gBAAgB,kB,gBAG9BT,mBAAA,CAAoE;+DAApDQ,MAAA,CAAAE,OAAO,GAAAC,MAAA;IAAEC,IAAI,EAAC,MAAM;IAACC,WAAW,EAAC;iDAAjCL,MAAA,CAAAE,OAAO,E,GACvBV,mBAAA,CAAkD;IAAzCc,OAAK,EAAAC,MAAA,QAAAA,MAAA,UAAAC,IAAA,KAAER,MAAA,CAAAS,WAAA,IAAAT,MAAA,CAAAS,WAAA,IAAAD,IAAA,CAAW;KAAE,cAAY,GACzChB,mBAAA,CAEK,c,kBADHI,mBAAA,CAAyEc,SAAA,QAAAC,WAAA,CAAnDX,MAAA,CAAAY,gBAAgB,EAA3BV,OAAO;yBAAlBN,mBAAA,CAAyE;MAAhCiB,GAAG,EAAEX;IAAO,GAAAH,gBAAA,CAAKG,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}