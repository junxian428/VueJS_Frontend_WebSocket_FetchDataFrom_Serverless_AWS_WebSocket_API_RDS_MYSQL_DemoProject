{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\n//[{\"id\":12,\"device\":\"PLC CP1E\",\"Temp\":25.5,\"pressure\":1013.25,\"amp\":5.55,\"status\":\"Ok\",\"valve1\":\"OMRON\",\"valve1_status\":\"IOT\",\"valve2\":\"OMRON\",\"valve2_status\":\"OMRON\",\"valve3\":\"OMRON\",\"valve3_status\":\"OMRON\",\"timer1\":\"OMRON\",\"timer2\":\"OMRON\"}]\nimport { ref, onMounted, onBeforeUnmount, computed } from 'vue';\nexport default {\n  setup() {\n    const connectionStatus = ref('Not connected');\n    const receivedMessages = ref([]);\n    const message = ref('');\n    const dataArray = ref([{\n      id: 12,\n      device: 'DEFAULT NOT CONNECTED',\n      Temp: 0,\n      pressure: 0,\n      amp: 0,\n      status: '',\n      valve1: '',\n      valve1_status: '',\n      valve2: '',\n      valve2_status: '',\n      valve3: '',\n      valve3_status: '',\n      timer1: '',\n      timer2: ''\n    }\n    // Add more objects if needed\n    ]);\n\n    let socket = null;\n    const connectWebSocket = () => {\n      // Replace with your WebSocket server URL\n      const serverUrl = 'wss://32zhhpmuta.execute-api.us-east-1.amazonaws.com/production';\n      socket = new WebSocket(serverUrl);\n      socket.onopen = () => {\n        connectionStatus.value = 'Connected';\n      };\n      socket.onmessage = event => {\n        console.log(event.data);\n        const jsonData = event.data;\n        // Parse the JSON array\n        const dataArray = JSON.parse(jsonData);\n        //\n\n        if (dataArray.length > 0) {\n          const dataObject = dataArray[0];\n          const id = dataObject.id;\n          const device = dataObject.device;\n          const temp = dataObject.Temp;\n          const pressure = dataObject.pressure;\n          const amp = dataObject.amp;\n          const status = dataObject.status;\n          const valve1 = dataObject.valve1;\n          const valve1Status = dataObject.valve1_status;\n          const valve2 = dataObject.valve2;\n          const valve2Status = dataObject.valve2_status;\n          const valve3 = dataObject.valve3;\n          const valve3Status = dataObject.valve3_status;\n          const timer1 = dataObject.timer1;\n          const timer2 = dataObject.timer2;\n          console.log('id:', id);\n          console.log('device:', device);\n          console.log('temp:', temp);\n          console.log('pressure:', pressure);\n          console.log('amp:', amp);\n          console.log('status:', status);\n          console.log('valve1:', valve1);\n          console.log('valve1Status:', valve1Status);\n          console.log('valve2:', valve2);\n          console.log('valve2Status:', valve2Status);\n          console.log('valve3:', valve3);\n          console.log('valve3Status:', valve3Status);\n          console.log('timer1:', timer1);\n          console.log('timer2:', timer2);\n        }\n\n        //\n        receivedMessages.value.push(event.data);\n      };\n      socket.onerror = error => {\n        console.error('WebSocket error:', error);\n      };\n      socket.onclose = () => {\n        connectionStatus.value = 'Disconnected';\n      };\n    };\n    const sendMessage = () => {\n      if (socket && socket.readyState === WebSocket.OPEN) {\n        socket.send(message.value);\n        message.value = '';\n      }\n    };\n    onMounted(() => {\n      connectWebSocket();\n    });\n    onBeforeUnmount(() => {\n      if (socket) {\n        socket.close();\n      }\n    });\n    const dataObject = computed(() => dataArray.value[0]);\n    return {\n      id: dataObject.value.id,\n      device: dataObject.value.device,\n      temp: dataObject.value.Temp,\n      connectionStatus,\n      receivedMessages,\n      message,\n      sendMessage\n    };\n  }\n};","map":{"version":3,"names":["ref","onMounted","onBeforeUnmount","computed","setup","connectionStatus","receivedMessages","message","dataArray","id","device","Temp","pressure","amp","status","valve1","valve1_status","valve2","valve2_status","valve3","valve3_status","timer1","timer2","socket","connectWebSocket","serverUrl","WebSocket","onopen","value","onmessage","event","console","log","data","jsonData","JSON","parse","length","dataObject","temp","valve1Status","valve2Status","valve3Status","push","onerror","error","onclose","sendMessage","readyState","OPEN","send","close"],"sources":["D:\\Project\\PROOFOFCONCEPT3\\VueJS_Flask_Socket-main\\VueJS_Flask_Socket-main\\src\\components\\HelloWorld.vue"],"sourcesContent":["<template>\n  <div>\n    <h1>Sterilizer SCADA</h1>\n\n    <div class=\"image-container\">\n      <div class=\"data-display\">\n      <p>ID: {{ id }}</p>\n      <p>Device: {{ device }}</p>\n      <p>Temp: {{ temp }}</p>\n      <p>Pressure: {{ pressure }}</p>\n      <p>Amp: {{ amp }}</p>\n      <p>Status: {{ status }}</p>\n      <p>Valve 1: {{ valve1 }}</p>\n      <p>Valve 1: {{ valve1 }}</p>\n\n      <!-- Add more properties here -->\n    </div>\n    <img src=\"/SCADA.jpg\" alt=\"My Image\" />\n    <p class=\"overlay-text\">Image</p>\n\n\n</div>\n\n\n\n    <p>Status: {{ connectionStatus }}</p>\n\n\n    <input v-model=\"message\" type=\"text\" placeholder=\"Type a message\" />\n    <button @click=\"sendMessage\">Send Message</button>\n    <ul>\n      <li v-for=\"message in receivedMessages\" :key=\"message\">{{ message }}</li>\n    </ul>\n  </div>\n</template>\n\n<script>\n//[{\"id\":12,\"device\":\"PLC CP1E\",\"Temp\":25.5,\"pressure\":1013.25,\"amp\":5.55,\"status\":\"Ok\",\"valve1\":\"OMRON\",\"valve1_status\":\"IOT\",\"valve2\":\"OMRON\",\"valve2_status\":\"OMRON\",\"valve3\":\"OMRON\",\"valve3_status\":\"OMRON\",\"timer1\":\"OMRON\",\"timer2\":\"OMRON\"}]\nimport { ref, onMounted, onBeforeUnmount , computed } from 'vue';\n\nexport default {\n  setup() {\n    const connectionStatus = ref('Not connected');\n    const receivedMessages = ref([]);\n    const message = ref('');\n    const dataArray = ref([\n      {\n        id: 12,\n        device: 'DEFAULT NOT CONNECTED',\n        Temp: 0,\n        pressure: 0,\n        amp: 0,\n        status: '',\n        valve1: '',\n        valve1_status: '',\n        valve2: '',\n        valve2_status: '',\n        valve3: '',\n        valve3_status: '',\n        timer1: '',\n        timer2: '',\n      },\n      // Add more objects if needed\n    ]);\n    let socket = null;\n\n    const connectWebSocket = () => {\n      // Replace with your WebSocket server URL\n      const serverUrl = 'wss://32zhhpmuta.execute-api.us-east-1.amazonaws.com/production';\n      socket = new WebSocket(serverUrl);\n\n      socket.onopen = () => {\n        connectionStatus.value = 'Connected';\n      };\n\n      socket.onmessage = (event) => {\n        console.log(event.data);\n        const jsonData = event.data;\n        // Parse the JSON array\n        const dataArray = JSON.parse(jsonData);\n        //\n\n        if (dataArray.length > 0) {\n  const dataObject = dataArray[0];\n  const id = dataObject.id;\n  const device = dataObject.device;\n  const temp = dataObject.Temp;\n  const pressure = dataObject.pressure;\n  const amp = dataObject.amp;\n  const status = dataObject.status;\n  const valve1 = dataObject.valve1;\n  const valve1Status = dataObject.valve1_status;\n  const valve2 = dataObject.valve2;\n  const valve2Status = dataObject.valve2_status;\n  const valve3 = dataObject.valve3;\n  const valve3Status = dataObject.valve3_status;\n  const timer1 = dataObject.timer1;\n  const timer2 = dataObject.timer2;\n\n  console.log('id:', id);\n  console.log('device:', device);\n  console.log('temp:', temp);\n  console.log('pressure:', pressure);\n  console.log('amp:', amp);\n  console.log('status:', status);\n  console.log('valve1:', valve1);\n  console.log('valve1Status:', valve1Status);\n  console.log('valve2:', valve2);\n  console.log('valve2Status:', valve2Status);\n  console.log('valve3:', valve3);\n  console.log('valve3Status:', valve3Status);\n  console.log('timer1:', timer1);\n  console.log('timer2:', timer2);\n}\n\n        //\n        receivedMessages.value.push(event.data);\n      };\n\n      socket.onerror = (error) => {\n        console.error('WebSocket error:', error);\n      };\n\n      socket.onclose = () => {\n        connectionStatus.value = 'Disconnected';\n      };\n    };\n\n    const sendMessage = () => {\n      if (socket && socket.readyState === WebSocket.OPEN) {\n        socket.send(message.value);\n        message.value = '';\n      }\n    };\n\n    onMounted(() => {\n      connectWebSocket();\n    });\n\n    onBeforeUnmount(() => {\n      if (socket) {\n        socket.close();\n      }\n    });\n    const dataObject = computed(() => dataArray.value[0]);\n\n    return {\n      id: dataObject.value.id,\n      device: dataObject.value.device,\n      temp: dataObject.value.Temp,\n\n      connectionStatus,\n      receivedMessages,\n      message,\n      sendMessage,\n    };\n  },\n};\n</script>\n\n<style>\n/* Add your CSS styles here */\n.image-container {\n  position: relative;\n}\n\n.overlay-text {\n  position: absolute;\n  top: 50%; /* Adjust to vertically center the text */\n  left: 50%; /* Adjust to horizontally center the text */\n  transform: translate(-50%, -50%);\n  font-size: 24px; /* Adjust as needed */\n  font-weight: bold;\n  color: red; /* Adjust the text color */\n  text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.6); /* Add a text shadow for better visibility */\n}\n</style>\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}